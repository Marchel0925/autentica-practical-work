{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { formatDate } from '@angular/common';\nlet FormComponent = class FormComponent {\n  constructor(fb, technologyService) {\n    this.fb = fb;\n    this.technologyService = technologyService;\n    this.application = null;\n    this.technologies = [];\n    this.applicationForm = this.fb.group({\n      description: [\"\", Validators.maxLength(300)],\n      email: [\"\", [Validators.required, Validators.email]],\n      neededTill: [formatDate(new Date(), \"yyyy-MM-dd HH:mm\", \"en\"), Validators.required],\n      newTechnology: [false],\n      technology: this.fb.group({\n        type: [\"\", Validators.required],\n        ram: [4, Validators.required],\n        cores: [1, Validators.required],\n        motherboard: [\"\", Validators.required],\n        gpu: [\"\", Validators.required]\n      })\n    });\n    this.technologyIdSelected = -1;\n    this.motherboards = [];\n    this.gpus = [];\n  }\n  ngOnInit() {\n    // This means that we are editing an application\n    if (this.application) {\n      this.applicationForm.patchValue({\n        description: this.application.description,\n        email: this.application.email,\n        neededTill: formatDate(new Date(this.application.neededTill), \"yyyy-MM-dd HH:mm\", \"en\"),\n        newTechnology: this.application.technology ? true : false,\n        technology: {\n          type: this.application.technology?.type,\n          ram: this.application.technology?.ram,\n          cores: this.application.technology?.cores,\n          motherboard: this.application.technology?.motherboard,\n          gpu: this.application.technology?.gpu\n        }\n      });\n      this.setTechnologyGPU();\n      this.setTechnologyMotherboards();\n    }\n  }\n  get controls() {\n    return this.applicationForm.controls;\n  }\n  get techControls() {\n    return this.controls.technology.controls;\n  }\n  get technologyTypes() {\n    return this.technologyService.technologyTypes;\n  }\n  get technologyRAM() {\n    return this.technologyService.technologyRAM;\n  }\n  get technologyCores() {\n    return this.technologyService.technologyCores;\n  }\n  setTechnologyMotherboards() {\n    const type = this.controls.technology.value.type ? this.controls.technology.value.type : \"\";\n    this.motherboards = this.technologyService.technologyMotherboards(type);\n  }\n  setTechnologyGPU() {\n    const type = this.controls.technology.value.type ? this.controls.technology.value.type : \"\";\n    this.gpus = this.technologyService.technologyGPU(type);\n  }\n  onCheckboxChange(event) {\n    this.controls.newTechnology.setValue(event.target.checked);\n  }\n  onTechnologyClicked(id) {\n    if (this.technologyIdSelected != id) {\n      this.technologyIdSelected = id;\n    }\n  }\n  onTypeChange(event) {\n    this.motherboards = this.technologyService.technologyMotherboards(event.target.value);\n    this.gpus = this.technologyService.technologyGPU(event.target.value);\n  }\n  onSubmit() {}\n};\n__decorate([Input(\"application\")], FormComponent.prototype, \"application\", void 0);\n__decorate([Input(\"technologies\")], FormComponent.prototype, \"technologies\", void 0);\nFormComponent = __decorate([Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})], FormComponent);\nexport { FormComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","Validators","formatDate","FormComponent","constructor","fb","technologyService","group","description","maxLength","email","required","neededTill","Date","newTechnology","technology","type","ram","cores","motherboard","gpu","ngOnInit","application","applicationForm","patchValue","setTechnologyGPU","setTechnologyMotherboards","controls","techControls","technologyTypes","technologyRAM","technologyCores","value","motherboards","technologyMotherboards","gpus","technologyGPU","onCheckboxChange","event","setValue","target","checked","onTechnologyClicked","id","technologyIdSelected","onTypeChange","onSubmit","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/marchel0925/development/VSCodeProjects/autentica-practical-frontend/src/app/form/form.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { Application } from '../model/application.model';\nimport { Technology } from '../model/technology.model';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { formatDate } from '@angular/common';\nimport { TechnologyService } from '../service/technology/technology.service';\n\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n  @Input(\"application\") application: Application | null = null;\n  @Input(\"technologies\") technologies: Array<Technology> = [];\n  applicationForm = this.fb.group({\n    description: [\"\", Validators.maxLength(300)],\n    email: [\"\", [Validators.required, Validators.email]],\n    neededTill: [formatDate(new Date(), \"yyyy-MM-dd HH:mm\", \"en\"), Validators.required],\n    newTechnology: [false],\n    technology: this.fb.group({\n      type: [\"\", Validators.required],\n      ram: [4, Validators.required],\n      cores: [1, Validators.required],\n      motherboard: [\"\", Validators.required],\n      gpu: [\"\", Validators.required],\n    }),\n  });\n\n  technologyIdSelected = -1;\n  motherboards : Array<string> = [];\n  gpus : Array<string> = [];\n\n  constructor(private fb: FormBuilder, private technologyService: TechnologyService) {}\n\n  ngOnInit(): void {\n    // This means that we are editing an application\n    if (this.application) {\n      this.applicationForm.patchValue({\n        description: this.application.description,\n        email: this.application.email,\n        neededTill: formatDate(new Date(this.application.neededTill), \"yyyy-MM-dd HH:mm\", \"en\"),\n        newTechnology: this.application.technology ? true : false,\n        technology: {\n          type: this.application.technology?.type,\n          ram: this.application.technology?.ram,\n          cores: this.application.technology?.cores,\n          motherboard: this.application.technology?.motherboard,\n          gpu: this.application.technology?.gpu,\n        }\n      });\n\n      this.setTechnologyGPU();\n      this.setTechnologyMotherboards()\n    }\n  }\n\n  get controls() {return this.applicationForm.controls;}\n  get techControls() {return this.controls.technology.controls;}\n\n  get technologyTypes() { return this.technologyService.technologyTypes;}\n\n  get technologyRAM() { return this.technologyService.technologyRAM;}\n\n  get technologyCores() { return this.technologyService.technologyCores;}\n\n  setTechnologyMotherboards() {\n    const type = this.controls.technology.value.type ? this.controls.technology.value.type : \"\";\n    this.motherboards = this.technologyService.technologyMotherboards(type);\n  }\n\n  setTechnologyGPU() {\n    const type = this.controls.technology.value.type ? this.controls.technology.value.type : \"\";\n    this.gpus = this.technologyService.technologyGPU(type);\n  }\n\n  onCheckboxChange(event: any) {\n    this.controls.newTechnology.setValue(event.target.checked);\n  }\n\n  onTechnologyClicked(id: number) {\n    if (this.technologyIdSelected != id) {\n      this.technologyIdSelected = id;\n    }\n  }\n\n  onTypeChange(event: any) {\n    this.motherboards = this.technologyService.technologyMotherboards(event.target.value)\n    this.gpus = this.technologyService.technologyGPU(event.target.value)\n  }\n\n  onSubmit() {\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}