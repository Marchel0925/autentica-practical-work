{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { formatDate } from '@angular/common';\nlet FormComponent = class FormComponent {\n  constructor(fb, technologyService, applicationService) {\n    this.fb = fb;\n    this.technologyService = technologyService;\n    this.applicationService = applicationService;\n    this.eventEmitter = new EventEmitter();\n    this.applicationForm = this.fb.group({\n      description: [\"\", Validators.maxLength(300)],\n      email: [\"\", [Validators.required, Validators.email]],\n      neededTill: [formatDate(new Date(), \"yyyy-MM-dd HH:mm\", \"en\"), Validators.required],\n      technology: this.fb.group({\n        type: [\"\", Validators.required],\n        ram: [4, Validators.required],\n        cores: [1, Validators.required],\n        motherboard: [\"\", Validators.required],\n        gpu: [\"\", Validators.required]\n      })\n    });\n    this.motherboards = [];\n    this.gpus = [];\n  }\n  ngOnInit() {\n    this.initArrays();\n  }\n  get controls() {\n    return this.applicationForm.controls;\n  }\n  get techControls() {\n    return this.controls.technology.controls;\n  }\n  get technologyTypes() {\n    return this.technologyService.technologyTypes;\n  }\n  get technologyRAM() {\n    return this.technologyService.technologyRAM;\n  }\n  get technologyCores() {\n    return this.technologyService.technologyCores;\n  }\n  initArrays() {\n    const type = this.controls.technology.value.type ? this.controls.technology.value.type : \"desktop\";\n    this.motherboards = this.technologyService.technologyMotherboards(type);\n    this.gpus = this.technologyService.technologyGPU(type);\n  }\n  onTypeChange(event) {\n    this.motherboards = this.technologyService.technologyMotherboards(event.target.value);\n    this.gpus = this.technologyService.technologyGPU(event.target.value);\n  }\n  onSubmit() {\n    if (this.applicationForm.valid) {\n      const newApplication = this.applicationForm.value;\n      newApplication.id = 0;\n      newApplication.created = new Date().getTime();\n      newApplication.status = \"sent\";\n      newApplication.technology.id = 0;\n      newApplication.neededTill = new Date(newApplication.neededTill).getTime();\n    }\n  }\n  emitEvent() {\n    this.applicationForm.reset();\n    this.eventEmitter.emit();\n  }\n};\n__decorate([Output()], FormComponent.prototype, \"eventEmitter\", void 0);\nFormComponent = __decorate([Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})], FormComponent);\nexport { FormComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Output","Validators","formatDate","FormComponent","constructor","fb","technologyService","applicationService","group","description","maxLength","email","required","neededTill","Date","technology","type","ram","cores","motherboard","gpu","ngOnInit","initArrays","controls","applicationForm","techControls","technologyTypes","technologyRAM","technologyCores","value","motherboards","technologyMotherboards","gpus","technologyGPU","onTypeChange","event","target","onSubmit","valid","newApplication","id","created","getTime","status","emitEvent","reset","eventEmitter","emit","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/marchel0925/development/VSCodeProjects/autentica-practical-frontend/src/app/form/form.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Application } from '../model/application.model';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { formatDate } from '@angular/common';\nimport { TechnologyService } from '../service/technology/technology.service';\n\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n  @Output() eventEmitter = new EventEmitter<any>();\n  applicationForm = this.fb.group({\n    description: [\"\", Validators.maxLength(300)],\n    email: [\"\", [Validators.required, Validators.email]],\n    neededTill: [formatDate(new Date(), \"yyyy-MM-dd HH:mm\", \"en\"), Validators.required],\n    technology: this.fb.group({\n      type: [\"\", Validators.required],\n      ram: [4, Validators.required],\n      cores: [1, Validators.required],\n      motherboard: [\"\", Validators.required],\n      gpu: [\"\", Validators.required],\n    }),\n  });\n\n  motherboards : Array<string> = [];\n  gpus : Array<string> = [];\n\n  constructor(private fb: FormBuilder, private technologyService: TechnologyService, private applicationService: applicationService) {}\n\n  ngOnInit(): void {\n    this.initArrays();\n  }\n\n  get controls() {return this.applicationForm.controls;}\n  get techControls() {return this.controls.technology.controls;}\n\n  get technologyTypes() { return this.technologyService.technologyTypes;}\n\n  get technologyRAM() { return this.technologyService.technologyRAM;}\n\n  get technologyCores() { return this.technologyService.technologyCores;}\n\n  initArrays() {\n    const type = this.controls.technology.value.type ? this.controls.technology.value.type : \"desktop\";\n    this.motherboards = this.technologyService.technologyMotherboards(type);\n    this.gpus = this.technologyService.technologyGPU(type);\n  }\n\n  onTypeChange(event: any) {\n    this.motherboards = this.technologyService.technologyMotherboards(event.target.value)\n    this.gpus = this.technologyService.technologyGPU(event.target.value)\n  }\n\n  onSubmit() {\n    if (this.applicationForm.valid) {\n      const newApplication : any = this.applicationForm.value;\n      newApplication.id = 0;\n      newApplication.created = new Date().getTime();\n      newApplication.status = \"sent\";\n      newApplication.technology.id = 0;\n      newApplication.neededTill = new Date(newApplication.neededTill).getTime();\n    }\n  }\n\n  emitEvent() {\n    this.applicationForm.reset();\n    this.eventEmitter.emit();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}