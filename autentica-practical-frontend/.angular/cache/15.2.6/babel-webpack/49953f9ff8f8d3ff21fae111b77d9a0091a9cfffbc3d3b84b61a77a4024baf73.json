{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { formatDate } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction FormComponent_h3_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\");\n    i0.ɵɵtext(1, \"Edit application\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormComponent_h3_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\");\n    i0.ɵɵtext(1, \"Apply\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\nfunction FormComponent_div_23_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 17);\n    i0.ɵɵlistener(\"click\", function FormComponent_div_23_tr_17_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const t_r5 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.onTechnologyClicked(t_r5.id));\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\")(12, \"div\", 18);\n    i0.ɵɵelement(13, \"input\", 19);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const t_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"selected\", ctx_r4.story === ctx_r4.selectedStory);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(t_r5.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(t_r5.ram);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(t_r5.cores);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(t_r5.motherboard);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(t_r5.gpu);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", t_r5.id === ctx_r4.technologySelected);\n  }\n}\nfunction FormComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"table\", 13)(2, \"thead\", 14)(3, \"tr\")(4, \"th\", 15);\n    i0.ɵɵtext(5, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\", 15);\n    i0.ɵɵtext(7, \"RAM (GB)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\", 15);\n    i0.ɵɵtext(9, \"Cores\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\", 15);\n    i0.ɵɵtext(11, \"Motherboard\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\", 15);\n    i0.ɵɵtext(13, \"GPU\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"th\", 15);\n    i0.ɵɵtext(15, \"Select\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"tbody\");\n    i0.ɵɵtemplate(17, FormComponent_div_23_tr_17_Template, 14, 8, \"tr\", 16);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(17);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.technologies);\n  }\n}\nexport class FormComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.application = null;\n    this.technologies = [];\n    this.applicationForm = this.fb.group({\n      description: [\"\", Validators.maxLength(300)],\n      email: [\"\", [Validators.required, Validators.email]],\n      neededTill: [formatDate(new Date(), \"yyyy-MM-dd HH:mm\", \"en\"), Validators.required],\n      newTechnology: [false],\n      technology: this.fb.group({\n        type: [\"\"],\n        ram: [4],\n        cores: [1],\n        motherboard: [\"\"],\n        gpu: [\"\"]\n      })\n    });\n    this.technologySelected = -1;\n  }\n  ngOnInit() {\n    // This means that we are editing an application\n    if (this.application) {\n      this.applicationForm.patchValue({\n        description: this.application.description,\n        email: this.application.email,\n        neededTill: formatDate(new Date(this.application.neededTill), \"yyyy-MM-dd HH:mm\", \"en\"),\n        newTechnology: this.application.technology ? true : false,\n        technology: {\n          type: this.application.technology?.type,\n          ram: this.application.technology?.ram,\n          cores: this.application.technology?.cores,\n          motherboard: this.application.technology?.motherboard,\n          gpu: this.application.technology?.gpu\n        }\n      });\n    }\n  }\n  get controls() {\n    return this.applicationForm.controls;\n  }\n  onCheckboxChange(event) {\n    this.controls.newTechnology.setValue(event.target.checked);\n  }\n  onTechnologyClicked(id) {\n    if (this.technologySelected != id) {\n      this.technologySelected = id;\n    }\n  }\n}\nFormComponent.ɵfac = function FormComponent_Factory(t) {\n  return new (t || FormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormComponent,\n  selectors: [[\"app-form\"]],\n  inputs: {\n    application: \"application\",\n    technologies: \"technologies\"\n  },\n  decls: 24,\n  vars: 6,\n  consts: [[4, \"ngIf\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"description\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"description\", \"formControlName\", \"description\", \"aria-describedby\", \"help\", \"maxlength\", \"300\", 1, \"form-control\"], [\"id\", \"help\", 1, \"form-text\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"something@mail.com\", 1, \"form-control\"], [\"for\", \"neededTill\", 1, \"form-label\"], [\"type\", \"datetime-local\", \"id\", \"neededTill\", \"formControlName\", \"neededTill\", 1, \"form-control\"], [1, \"form-check\", \"form-switch\", \"mt-2\"], [\"type\", \"checkbox\", \"formControlName\", \"newTechnology\", \"id\", \"switch\", 1, \"form-check-input\", 3, \"value\", \"change\"], [\"for\", \"switch\", 1, \"form-check-label\"], [1, \"table\", \"table-hover\", \"table-responsive\"], [1, \"table-dark\"], [\"scope\", \"col\"], [3, \"selected\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [1, \"form-check\"], [\"type\", \"checkbox\", \"disabled\", \"\", 1, \"form-check-input\", 3, \"value\"]],\n  template: function FormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtemplate(1, FormComponent_h3_1_Template, 2, 0, \"h3\", 0);\n      i0.ɵɵtemplate(2, FormComponent_h3_2_Template, 2, 0, \"h3\", 0);\n      i0.ɵɵelementStart(3, \"form\", 1)(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Description:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"textarea\", 4);\n      i0.ɵɵelementStart(8, \"div\", 5);\n      i0.ɵɵtext(9, \"Why do you need this? No more than 300 characters.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 6);\n      i0.ɵɵtext(12, \"Email:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 2)(15, \"label\", 8);\n      i0.ɵɵtext(16, \"Needed till:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 10)(19, \"input\", 11);\n      i0.ɵɵlistener(\"change\", function FormComponent_Template_input_change_19_listener($event) {\n        return ctx.onCheckboxChange($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"label\", 12);\n      i0.ɵɵtext(21, \"Request a new technology?\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(22, FormComponent_div_22_Template, 1, 0, \"div\", 0);\n      i0.ɵɵtemplate(23, FormComponent_div_23_Template, 18, 1, \"div\", 0);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.application);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.application);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.applicationForm);\n      i0.ɵɵadvance(16);\n      i0.ɵɵproperty(\"value\", ctx.controls.newTechnology.value);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.controls.newTechnology.value);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.controls.newTechnology.value);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.CheckboxControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","formatDate","i0","FormComponent","constructor","fb","group","description","maxLength","email","required","neededTill","Date","newTechnology","technology","type","ram","cores","motherboard","gpu","ngOnInit","application","applicationForm","patchValue","controls","onCheckboxChange","event","setValue","target","checked","onTechnologyClicked","id","technologySelected","selectors","inputs","technologies","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/marchel0925/development/VSCodeProjects/autentica-practical-frontend/src/app/form/form.component.ts","/Users/marchel0925/development/VSCodeProjects/autentica-practical-frontend/src/app/form/form.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { Application } from '../model/application.model';\nimport { Technology } from '../model/technology.model';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { formatDate } from '@angular/common';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n  @Input(\"application\") application: Application | null = null;\n  @Input(\"technologies\") technologies: Array<Technology> = [];\n  applicationForm = this.fb.group({\n    description: [\"\", Validators.maxLength(300)],\n    email: [\"\", [Validators.required, Validators.email]],\n    neededTill: [formatDate(new Date(), \"yyyy-MM-dd HH:mm\", \"en\"), Validators.required],\n    newTechnology: [false],\n    technology: this.fb.group({\n      type: [\"\"],\n      ram: [4],\n      cores: [1],\n      motherboard: [\"\"],\n      gpu: [\"\"],\n    }),\n  });\n\n  technologySelected = -1;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    // This means that we are editing an application\n    if (this.application) {\n      this.applicationForm.patchValue({\n        description: this.application.description,\n        email: this.application.email,\n        neededTill: formatDate(new Date(this.application.neededTill), \"yyyy-MM-dd HH:mm\", \"en\"),\n        newTechnology: this.application.technology ? true : false,\n        technology: {\n          type: this.application.technology?.type,\n          ram: this.application.technology?.ram,\n          cores: this.application.technology?.cores,\n          motherboard: this.application.technology?.motherboard,\n          gpu: this.application.technology?.gpu,\n        }\n      });\n    }\n  }\n\n  get controls() {\n    return this.applicationForm.controls;\n  }\n\n  onCheckboxChange(event: any) {\n    this.controls.newTechnology.setValue(event.target.checked);\n  }\n\n  onTechnologyClicked(id: number) {\n    if (this.technologySelected != id) {\n      this.technologySelected = id;\n    }\n  }\n\n}\n","<div>\n  <h3 *ngIf=\"application\">Edit application</h3>\n  <h3 *ngIf=\"!application\">Apply</h3>\n  <form [formGroup]=\"applicationForm\">\n    <div class=\"form-group\">\n      <label class=\"form-label\" for=\"description\">Description:</label>\n      <textarea\n        type=\"text\"\n        class=\"form-control\"\n        id=\"description\"\n        formControlName=\"description\"\n        aria-describedby=\"help\"\n        maxlength=\"300\"\n      ></textarea>\n      <div id=\"help\" class=\"form-text\">Why do you need this? No more than 300 characters.</div>\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"form-label\" for=\"email\">Email:</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        id=\"email\"\n        formControlName=\"email\"\n        placeholder=\"something@mail.com\"\n      />\n    </div>\n\n    <div class=\"form-group\">\n      <label class=\"form-label\" for=\"neededTill\">Needed till:</label>\n      <input\n        type=\"datetime-local\"\n        class=\"form-control\"\n        id=\"neededTill\"\n        formControlName=\"neededTill\"\n      />\n    </div>\n\n    <div class=\"form-check form-switch mt-2\">\n      <input\n        class=\"form-check-input\"\n        type=\"checkbox\"\n        formControlName=\"newTechnology\"\n        id=\"switch\"\n        [value]=\"controls.newTechnology.value\"\n        (change)=\"onCheckboxChange($event)\"\n      >\n      <label class=\"form-check-label\" for=\"switch\">Request a new technology?</label>\n    </div>\n\n    <div *ngIf=\"controls.newTechnology.value\">\n      \n    </div>\n\n    <div *ngIf=\"!controls.newTechnology.value\">\n      <table class=\"table table-hover table-responsive\">\n        <thead class=\"table-dark\">\n          <tr>\n            <th scope=\"col\">Type</th>\n            <th scope=\"col\">RAM (GB)</th>\n            <th scope=\"col\">Cores</th>\n            <th scope=\"col\">Motherboard</th>\n            <th scope=\"col\">GPU</th>\n            <th scope=\"col\">Select</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let t of technologies\" (click)=\"onTechnologyClicked(t.id)\" [class.selected]=\"story === selectedStory\">\n            <td>{{t.type}}</td>\n            <td>{{t.ram}}</td>\n            <td>{{t.cores}}</td>\n            <td>{{t.motherboard}}</td>\n            <td>{{t.gpu}}</td>\n            <td>\n              <div class=\"form-check\">\n                <input class=\"form-check-input\" type=\"checkbox\" [value]=\"t.id===technologySelected\" disabled>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    \n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}